upstream gunicorn_flask {
    # swap the commented lines below to switch between socket and port
    # server unix:/tmp/gun_res_alloc.sock fail_timeout=0;
    server unix:/homelocal/joaoguerreiro/resourceAllocation/socket/gun_res_alloc.sock fail_timeout=0;
    #server 127.0.0.1:5000 fail_timeout=0;
}

server {
    listen 443 ssl;
    # server_name www.localhost;
    server_name $hostname;
    ssl_certificate /etc/ssl/certs/resalloc_cert.pem;
    ssl_certificate_key /etc/ssl/certs/resalloc_key.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_dhparam /etc/ssl/certs/resalloc_dhparam.pem;
    ssl_ecdh_curve secp384r1;

    access_log /var/log/nginx/res_alloc.access.log;
    error_log /var/log/nginx/res_alloc.error.log info;

    # nginx should serve up static files and never send to the WSGI server
    location /static {
        autoindex on;
        alias /homelocal/resalloc_bot/resourceAllocation/flask_app/templates/static/;
        # alias /mnt/c/Users/joaof/OneDrive/github/joaofilipedg/resourceAllocation/flask_app/templates/static/;
        expires max;
    }

    # requests that do not fall under /static are passed on to the WSGI
    # server that was specified above running on port 8000
    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;

        if (!-f $request_filename) {
            proxy_pass http://gunicorn_flask;
            break;
        }
    }
}

# server {
#     listen 80;
#     server_name $hostname;
#     location / {
#         include proxy_params;
#         proxy_pass http://gunicorn_flask;
#         proxy_set_header X-Forwarded-For $remote_addr;
#         proxy_set_header Host $http_host;
#     }
#     access_log /var/log/nginx/res_alloc.access.log;
#     error_log /var/log/nginx/res_alloc.error.log info;
# }
# server {
#     listen 80 default_server;
#     server_name $hostname;
#     return 301 https://$hostname$request_uri;
# }
server {
  listen 80;
  listen [::]:80;
  server_name $hostname;
  return 301 https://$server_name$request_uri;
}